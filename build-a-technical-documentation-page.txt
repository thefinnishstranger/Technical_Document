** start of undefined **

<!DOCTYPE html>
<hmtl lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
    <title>Technical Documentation</title>
  </head>

  <body>
    <main id="main-doc">

      <section class="main-section" id="introduction">
        
        <header>Introduction</header>

        <p>C++ and C are both widely-used programming languages with distinct characteristics. C, developed in the 1970s, is known for its simplicity and low-level system programming capabilities. C++, an extension of C created in the 1980s, adds object-oriented features and a higher level of abstraction to C, making it suitable for a broader range of applications. Both languages are used in various domains, including software development, embedded systems, game development, and more, and they have rich ecosystems of libraries and tools to support programmers in their respective tasks.</p>
        
      </section>

      <section class="main-section" id="What_you_should_already_know">
       
        <header>What you should already know</header>

        <p>This documentation assume that you already know the following information:</p>

        <ul>
          <li>C is a simple, low-level programming language developed in the 1970s, primarily for system programming.</li>
          <li>C++ is an extension of C created in the 1980s, adding object-oriented features and a higher level of abstraction.</li>
          <li>Both C and C++ have rich ecosystems of libraries, frameworks, and development tools to support programmers in their tasks.</li>

      </section>

      <section class="main-section" id="C++_and_C_Differences">
        <header>C++ and C differences</header>

        <p> C is primarily a procedural programming language. It emphasizes structured programming and focuses on functions. C++ is a multi-paradigm language that supports both procedural and object-oriented programming (OOP). It allows for the creation of classes and objects, enabling the use of OOP principles like encapsulation, inheritance, and polymorphism.</p>
        <p>C provides a lower level of abstraction and is often used for system-level programming, such as operating systems and device drivers. C++ provides a higher level of abstraction due to its OOP features, making it suitable for a wider range of applications, including application software development and complex system design.</p>
        <p>C has a limited standard library that provides basic functionalities like input/output and string manipulation. C++ extends the C standard library and includes additional libraries for various purposes, such as the Standard Template Library (STL), which offers data structures and algorithms, making it easier to work with complex data structures and collections.</p>

      </section>

      <section class="main-section" id="Classic_Hello_World_Program">
        <header>Classic Hello World Program</header>

        <p>To get started with the most classical program in all programming languages you have to do the following code: </p>
        <p class="code_header">C++:</p>

        <code>  </code>
        <code>#include &ltiostream&gt</code>
        <code>using namespace std;</code>
        <code>int main() {</code>
        <code> cout &lt&lt "Hello World!" &lt&lt endl; </code>
        <code>return 0;</code>
        <code>}</code>

        <p class="code_header">C:</p>
        <code>#include "stdio.lib" </code>
        <code>int main() {</code>
        <code>printf("Hello World!\n");</code>
        <code>return 0;</code>
        <code>}</code>


      </section>

      <section class="main-section" id="Variables_and_how_to_set_them">
        <header>Variables and how to set them</header>

        <p>In both C and C++, variables are used to store data values. They must be declared with specific data types, such as int or char, before use. However, C++ introduces additional features, including the ability to declare variables within classes or structures, control their visibility using access specifiers, and employ constructors and destructors for objects, making it more versatile for object-oriented programming compared to C.</p>
        <p>Some ways you could set a variables(applies to both languages):</p>
        
        <code> int a = 5</code>
        <code> double b = 5.5</code>
        <code> string c = "Hello World!"</code>
        <code> boolean d = true</code>

      </section>

      <section class="main-section" id="Data_types">
        <header>Data Types</header>

        <p>The different data types in C and C++ are:</p>

        <ul>
          <li>Boolean - stores either true or false value</li>
          <li>char - single character</li>
          <li>int - basic integer</li>
          <li>float - fractional numbers</li>
          <li>double - longer fractional numbers</li>
        </ul>

        <p>As you can see there is no string data type and that is because in C the only way to store a string is by applying char* due to the fact that a string is just an array of characters. In c++ on the other hand, there is a string data type.</p>

      </section>
      
      <nav id="navbar">
        <ul>
          <li><header class="menu-header">C++ and C Documentation</header></li>
          <li><a href="#introduction" class="nav-link">Introduction</a></li>
          <li><a href="#What_you_should_already_know" class="nav-link">What you Should already know</a></li>
          <li><a href="#C++_and_C_Differences" class="nav-link">C++ and C differences</a></li>
          <li><a href="#Classic_Hello_World_Program" class="nav-link">Classic Hello World Program</a></li>
          <li><a href="#Variables_and_how_to_set_them" class="nav-link">Variables and how to set them</a></li>
          <li><a href="#Data_types" class="nav-link">Data Types</a></li>
        </ul>
      </nav>
    
    </main>
  </body>

** end of undefined **

** start of undefined **

html {
  box-sizing: border-box;
}

body {
  font-family: arial;
  font-size: 20px;
  background-color: beige;
}

header {
  font-size: 30px;
  font-weight: bold;
  
}
section {
  position: relative;
  margin-left: 21%;
  margin-bottom: 50px;
}

code {
  display: block;
}

.code_header {
  font-size: 20px;
  font-weight: bold;
}

#navbar > ul {
  list-style-type: none;
  border: 1px solid;
  border-top: 0;
  border-bottom: 0;
  margin: 0;
  padding: 0;
  width: 20%;
  height: 100%;
  position: fixed; 
  overflow: auto; 
  left: 0;
  top: 0;
}

#navbar > ul > li {
  border: 1px solid;
  border-right: 0;
  border-left: 0;
}

#navbar > ul > li:last-of-type {
  border-bottom: 0;
}

.menu-header {
  overflow: auto;
  font-size: 25px;
  margin-left: 10px;
  width: 100%;
}

#navbar > ul > li a {
  display: block;
  color: #000;
  padding: 8px 16px;
  text-decoration: none;
}


li a:hover {
  background-color: gray;
  color: white;
}

@media screen and (min-width: 480px) {
  #navbar {width: 200px; float: left;}
  #section {margin-left: 216px;}
}




** end of undefined **

